name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 验证发布版本
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # 检查是否为预发布版本 (包含 alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha.1"
            exit 1
          fi

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
            exit 1
          fi

  # 构建发布镜像
  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: validate-release
    strategy:
      matrix:
        service: [laojun-discovery, laojun-monitoring]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Sign container images
        uses: sigstore/cosign-installer@v3

      - name: Sign the published Docker image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ needs.validate-release.outputs.version }}

  # 安全扫描发布镜像
  security-scan-release:
    name: Security Scan Release Images
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-images]
    strategy:
      matrix:
        service: [laojun-discovery, laojun-monitoring]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ needs.validate-release.outputs.version }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ needs.validate-release.outputs.version }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL'

  # 打包 Helm Chart
  package-helm-chart:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Update Chart version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # 移除 'v' 前缀用于 Chart 版本
          CHART_VERSION="${VERSION#v}"
          
          # 更新主 Chart 版本
          sed -i "s/^version:.*/version: $CHART_VERSION/" helm/taishanglaojun/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: $VERSION/" helm/taishanglaojun/Chart.yaml
          
          # 更新子 Chart 版本
          sed -i "s/^version:.*/version: $CHART_VERSION/" helm/taishanglaojun/charts/taishanglaojun-platform/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: $VERSION/" helm/taishanglaojun/charts/taishanglaojun-platform/Chart.yaml
          
          sed -i "s/^version:.*/version: $CHART_VERSION/" helm/taishanglaojun/charts/taishanglaojun-monitoring/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: $VERSION/" helm/taishanglaojun/charts/taishanglaojun-monitoring/Chart.yaml

      - name: Package Helm chart
        run: |
          cd helm
          helm dependency update taishanglaojun
          helm package taishanglaojun
          
          # 生成 Chart 索引
          helm repo index . --url https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.version }}

      - name: Upload Helm chart
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: |
            helm/*.tgz
            helm/index.yaml

  # 生成发布说明
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Generating release notes from $PREVIOUS_TAG to $VERSION"
            
            # 生成变更日志
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            
            # 统计信息
            COMMITS_COUNT=$(git rev-list --count $PREVIOUS_TAG..HEAD)
            AUTHORS=$(git log --pretty=format:"%an" $PREVIOUS_TAG..HEAD | sort -u | wc -l)
            
            # 分类提交
            FEATURES=$(echo "$CHANGELOG" | grep -i "feat\|feature" || true)
            FIXES=$(echo "$CHANGELOG" | grep -i "fix\|bug" || true)
            DOCS=$(echo "$CHANGELOG" | grep -i "doc\|readme" || true)
            OTHERS=$(echo "$CHANGELOG" | grep -v -i "feat\|feature\|fix\|bug\|doc\|readme" || true)
          else
            echo "No previous tag found, this is the first release"
            CHANGELOG="- Initial release"
            COMMITS_COUNT=1
            AUTHORS=1
            FEATURES="- Initial release"
            FIXES=""
            DOCS=""
            OTHERS=""
          fi
          
          # 构建发布说明
          cat > release_notes.md << EOF
          ## 🚀 Release $VERSION
          
          ### 📊 Statistics
          - **Commits**: $COMMITS_COUNT
          - **Contributors**: $AUTHORS
          
          ### ✨ New Features
          $FEATURES
          
          ### 🐛 Bug Fixes
          $FIXES
          
          ### 📚 Documentation
          $DOCS
          
          ### 🔧 Other Changes
          $OTHERS
          
          ### 🐳 Docker Images
          - \`ghcr.io/${{ github.repository }}/laojun-discovery:$VERSION\`
          - \`ghcr.io/${{ github.repository }}/laojun-monitoring:$VERSION\`
          
          ### 📦 Helm Chart
          \`\`\`bash
          helm repo add taishanglaojun https://github.com/${{ github.repository }}/releases/download/$VERSION
          helm install taishanglaojun taishanglaojun/taishanglaojun --version ${VERSION#v}
          \`\`\`
          
          ### 🔗 Links
          - [Documentation](https://github.com/${{ github.repository }}/blob/$VERSION/README.md)
          - [Helm Chart](https://github.com/${{ github.repository }}/blob/$VERSION/helm/README.md)
          - [Changelog](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION)
          EOF
          
          # 输出到 GitHub Actions
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release_notes.md

  # 创建 GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-images, security-scan-release, package-helm-chart, generate-release-notes]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Release ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release_notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Upload Helm Chart to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: helm-chart/taishanglaojun-${{ needs.validate-release.outputs.version }}.tgz
          asset_name: taishanglaojun-${{ needs.validate-release.outputs.version }}.tgz
          asset_content_type: application/gzip

      - name: Upload Chart Index to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: helm-chart/index.yaml
          asset_name: index.yaml
          asset_content_type: application/yaml

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://taishanglaojun.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy release to production
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          helm upgrade --install taishanglaojun ./helm/taishanglaojun \
            --namespace taishanglaojun \
            --create-namespace \
            --set global.imageRegistry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.domain=taishanglaojun.local \
            --set platform.discovery.image.tag=$VERSION \
            --set platform.monitoring.image.tag=$VERSION \
            --set platform.discovery.replicaCount=3 \
            --set platform.monitoring.replicaCount=3 \
            --wait --timeout=15m

      - name: Verify production deployment
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taishanglaojun -n taishanglaojun --timeout=600s
          curl -f https://taishanglaojun.local/health || exit 1

  # 更新文档
  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in documentation
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # 更新 README.md 中的版本信息
          sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${VERSION#v}/g" README.md
          sed -i "s/tag: \"v[0-9]\+\.[0-9]\+\.[0-9]\+\"/tag: \"$VERSION\"/g" README.md
          
          # 更新 Helm 文档中的版本信息
          sed -i "s/version: [0-9]\+\.[0-9]\+\.[0-9]\+/version: ${VERSION#v}/g" helm/README.md
          sed -i "s/tag: \"v[0-9]\+\.[0-9]\+\.[0-9]\+\"/tag: \"$VERSION\"/g" helm/README.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md helm/README.md
          git commit -m "docs: update version to ${{ needs.validate-release.outputs.version }}" || exit 0
          git push

  # 通知发布
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release, deploy-production]
    if: always()
    steps:
      - name: Notify successful release
        if: ${{ needs.create-github-release.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 New release published!
            
            **Version**: ${{ needs.validate-release.outputs.version }}
            **Type**: ${{ needs.validate-release.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}
            
            🔗 **Links**:
            - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }})
            - [Docker Images](https://github.com/${{ github.repository }}/pkgs/container/taishanglaojun)
            - [Helm Chart](https://github.com/${{ github.repository }}/releases/download/${{ needs.validate-release.outputs.version }}/taishanglaojun-${{ needs.validate-release.outputs.version }}.tgz)
            
            ${{ needs.validate-release.outputs.is_prerelease == 'false' && '✅ **Deployed to Production**: https://taishanglaojun.local' || '⚠️ **Pre-release**: Not deployed to production' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failed release
        if: ${{ needs.create-github-release.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Release failed!
            
            **Version**: ${{ needs.validate-release.outputs.version }}
            
            Please check the workflow logs and fix the issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}