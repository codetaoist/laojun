name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 确定部署版本
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  # 预部署检查
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: determine-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify images exist
        run: |
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/laojun-discovery:${{ needs.determine-version.outputs.version }}
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/laojun-monitoring:${{ needs.determine-version.outputs.version }}

      - name: Run security scan on deployment images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/laojun-discovery:${{ needs.determine-version.outputs.version }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-version, pre-deployment-checks]
    if: needs.determine-version.outputs.environment == 'production'
    environment:
      name: production
      url: https://taishanglaojun.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Create backup
        run: |
          # 备份当前部署
          kubectl get all -n taishanglaojun -o yaml > backup-$(date +%Y%m%d-%H%M%S).yaml
          
          # 备份 Helm release
          helm get values taishanglaojun -n taishanglaojun > values-backup-$(date +%Y%m%d-%H%M%S).yaml

      - name: Deploy to production
        run: |
          helm upgrade --install taishanglaojun ./helm/taishanglaojun \
            --namespace taishanglaojun \
            --create-namespace \
            --set global.imageRegistry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.domain=taishanglaojun.local \
            --set platform.discovery.image.tag=${{ needs.determine-version.outputs.version }} \
            --set platform.monitoring.image.tag=${{ needs.determine-version.outputs.version }} \
            --set platform.discovery.replicaCount=3 \
            --set platform.monitoring.replicaCount=3 \
            --set monitoring.prometheus.persistence.size=100Gi \
            --set monitoring.grafana.persistence.size=20Gi \
            --wait --timeout=15m

      - name: Verify deployment
        run: |
          # 等待所有 Pod 就绪
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taishanglaojun -n taishanglaojun --timeout=600s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taishanglaojun-monitoring -n taishanglaojun-monitoring --timeout=600s
          
          # 检查服务健康状态
          kubectl get pods -n taishanglaojun
          kubectl get pods -n taishanglaojun-monitoring
          
          # 运行健康检查
          curl -f http://taishanglaojun.local/health || exit 1
          curl -f http://api.taishanglaojun.local/discovery/health || exit 1
          curl -f http://api.taishanglaojun.local/monitoring/health || exit 1

      - name: Run post-deployment tests
        run: |
          cd tests/e2e
          go test -v -tags=e2e ./... -env=production

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: production-deployment-${{ needs.determine-version.outputs.version }}
          path: |
            backup-*.yaml
            values-backup-*.yaml

  # 部署到预发布环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-version, pre-deployment-checks]
    if: needs.determine-version.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.taishanglaojun.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy to staging
        run: |
          helm upgrade --install taishanglaojun-staging ./helm/taishanglaojun \
            --namespace taishanglaojun-staging \
            --create-namespace \
            --set global.imageRegistry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.domain=staging.taishanglaojun.local \
            --set platform.discovery.image.tag=${{ needs.determine-version.outputs.version }} \
            --set platform.monitoring.image.tag=${{ needs.determine-version.outputs.version }} \
            --wait --timeout=10m

      - name: Verify staging deployment
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taishanglaojun -n taishanglaojun-staging --timeout=300s
          curl -f http://staging.taishanglaojun.local/health || exit 1

  # 金丝雀部署 (仅生产环境)
  canary-deployment:
    name: Canary Deployment
    runs-on: ubuntu-latest
    needs: [determine-version, pre-deployment-checks]
    if: needs.determine-version.outputs.environment == 'production' && github.ref_type == 'tag'
    environment:
      name: production-canary
      url: https://canary.taishanglaojun.local
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: Deploy canary version
        run: |
          # 部署金丝雀版本 (10% 流量)
          helm upgrade --install taishanglaojun-canary ./helm/taishanglaojun \
            --namespace taishanglaojun-canary \
            --create-namespace \
            --set global.imageRegistry=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set global.domain=canary.taishanglaojun.local \
            --set platform.discovery.image.tag=${{ needs.determine-version.outputs.version }} \
            --set platform.monitoring.image.tag=${{ needs.determine-version.outputs.version }} \
            --set platform.discovery.replicaCount=1 \
            --set platform.monitoring.replicaCount=1 \
            --wait --timeout=10m

      - name: Configure traffic splitting
        run: |
          # 配置 Istio 或 NGINX 进行流量分割
          kubectl apply -f k8s/canary/traffic-split.yaml

      - name: Monitor canary metrics
        run: |
          # 监控金丝雀版本的指标
          sleep 300  # 等待 5 分钟收集指标
          
          # 检查错误率和响应时间
          ERROR_RATE=$(curl -s "http://prometheus.taishanglaojun.local/api/v1/query?query=rate(http_requests_total{status=~'5..'}[5m])" | jq -r '.data.result[0].value[1]')
          
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "Error rate too high: $ERROR_RATE"
            exit 1
          fi

      - name: Promote or rollback canary
        run: |
          # 如果指标正常，提升金丝雀版本
          # 否则回滚
          echo "Canary deployment successful, ready for full rollout"

  # 数据库迁移
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [determine-version]
    if: needs.determine-version.outputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run database migrations
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          cd migrations
          go run migrate.go up

  # 性能基准测试
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.determine-version.outputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance benchmark
        run: |
          cd tests/performance
          k6 run --out json=production-benchmark.json production-benchmark.js

      - name: Compare with baseline
        run: |
          cd tests/performance
          python3 compare-benchmark.py production-benchmark.json baseline.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: performance-benchmark-${{ needs.determine-version.outputs.version }}
          path: tests/performance/production-benchmark.json

  # 监控和告警配置
  configure-monitoring:
    name: Configure Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

      - name: Update Prometheus rules
        run: |
          kubectl apply -f monitoring/prometheus/rules/ -n taishanglaojun-monitoring

      - name: Update Grafana dashboards
        run: |
          kubectl create configmap grafana-dashboards \
            --from-file=monitoring/grafana/dashboards/ \
            -n taishanglaojun-monitoring \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Configure alerts
        run: |
          kubectl apply -f monitoring/alertmanager/ -n taishanglaojun-monitoring

  # 清理旧版本
  cleanup:
    name: Cleanup Old Versions
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success')
    steps:
      - name: Cleanup old Docker images
        run: |
          # 保留最近 10 个版本的镜像
          echo "Cleaning up old Docker images..."
          # 这里可以添加清理逻辑

      - name: Cleanup old Helm releases
        run: |
          # 清理旧的 Helm release 历史
          helm history taishanglaojun -n taishanglaojun --max 10

  # 部署通知
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [determine-version, deploy-production, deploy-staging, performance-benchmark]
    if: always()
    steps:
      - name: Notify successful deployment
        if: ${{ (needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success') }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Deployment completed successfully!
            
            Environment: ${{ needs.determine-version.outputs.environment }}
            Version: ${{ needs.determine-version.outputs.version }}
            
            🔗 Links:
            - Application: https://${{ needs.determine-version.outputs.environment == 'production' && 'taishanglaojun.local' || 'staging.taishanglaojun.local' }}
            - Monitoring: https://monitoring.${{ needs.determine-version.outputs.environment == 'production' && 'taishanglaojun.local' || 'staging.taishanglaojun.local' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failed deployment
        if: ${{ needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Deployment failed!
            
            Environment: ${{ needs.determine-version.outputs.environment }}
            Version: ${{ needs.determine-version.outputs.version }}
            
            Please check the logs and take necessary action.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub release
        if: ${{ github.ref_type == 'tag' && needs.deploy-production.result == 'success' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📋 Changes
            - Deployed to production environment
            - Performance benchmark completed
            - Monitoring configured
            
            ### 🔗 Links
            - [Application](https://taishanglaojun.local)
            - [Monitoring](https://monitoring.taishanglaojun.local)
            - [Documentation](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/README.md)
          draft: false
          prerelease: false