apiVersion: apps/v1
kind: Deployment
metadata:
  name: laojun-app
  namespace: laojun
  labels:
    app: laojun
    component: app
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: laojun
      component: app
  template:
    metadata:
      labels:
        app: laojun
        component: app
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: laojun-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: app
        image: laojun/app:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: ENV
          value: "production"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: DB_NAME
          value: "laojun"
        - name: REDIS_HOST
          value: "redis-service"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: jwt-secret
        - name: LOG_LEVEL
          value: "info"
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/configs
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: uploads-volume
          mountPath: /app/uploads
        - name: temp-volume
          mountPath: /app/temp
      volumes:
      - name: config-volume
        configMap:
          name: app-config
      - name: logs-volume
        emptyDir: {}
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: temp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - laojun
                - key: component
                  operator: In
                  values:
                  - app
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: laojun-app-service
  namespace: laojun
  labels:
    app: laojun
    component: app
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: laojun
    component: app

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: laojun-service-account
  namespace: laojun
  labels:
    app: laojun

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: laojun
  name: laojun-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: laojun-role-binding
  namespace: laojun
subjects:
- kind: ServiceAccount
  name: laojun-service-account
  namespace: laojun
roleRef:
  kind: Role
  name: laojun-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: laojun
  labels:
    app: laojun
data:
  app.yaml: |
    server:
      port: 8080
      mode: release
      read_timeout: 30s
      write_timeout: 30s
      idle_timeout: 60s
    
    database:
      max_open_conns: 100
      max_idle_conns: 10
      conn_max_lifetime: 1h
      conn_max_idle_time: 10m
    
    redis:
      pool_size: 10
      min_idle_conns: 5
      dial_timeout: 5s
      read_timeout: 3s
      write_timeout: 3s
    
    logging:
      level: info
      format: json
      output: stdout
    
    monitoring:
      enabled: true
      metrics_path: /metrics
      health_path: /health
      ready_path: /ready

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: laojun
  labels:
    app: laojun
type: Opaque
data:
  username: bGFvanVu  # base64 encoded 'laojun'
  password: bGFvanVuX3Bhc3N3b3Jk  # base64 encoded 'laojun_password'

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: laojun
  labels:
    app: laojun
type: Opaque
data:
  password: cmVkaXNfcGFzc3dvcmQ=  # base64 encoded 'redis_password'

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: laojun
  labels:
    app: laojun
type: Opaque
data:
  jwt-secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleQ==  # base64 encoded 'your-super-secret-jwt-key'

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: laojun
  labels:
    app: laojun
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: laojun-ingress
  namespace: laojun
  labels:
    app: laojun
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.laojun.com
    secretName: laojun-tls
  rules:
  - host: api.laojun.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: laojun-app-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: laojun-hpa
  namespace: laojun
  labels:
    app: laojun
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: laojun-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: laojun-pdb
  namespace: laojun
  labels:
    app: laojun
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: laojun
      component: app

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: laojun-network-policy
  namespace: laojun
  labels:
    app: laojun
spec:
  podSelector:
    matchLabels:
      app: laojun
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: laojun
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80