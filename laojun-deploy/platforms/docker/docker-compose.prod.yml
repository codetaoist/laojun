version: '3.8'

# 太上老君系统 - 生产环境 Docker Compose 配置
# 使用方法: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # PostgreSQL 生产环境配置
  postgres:
    environment:
      # 生产环境性能优化
      POSTGRES_SHARED_BUFFERS: "512MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "2GB"
      POSTGRES_MAINTENANCE_WORK_MEM: "128MB"
      POSTGRES_WORK_MEM: "16MB"
      POSTGRES_RANDOM_PAGE_COST: "1.1"
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: "200"
      POSTGRES_MAX_WORKER_PROCESSES: "8"
      POSTGRES_MAX_PARALLEL_WORKERS_PER_GATHER: "4"
      POSTGRES_MAX_PARALLEL_WORKERS: "8"
      POSTGRES_MAX_PARALLEL_MAINTENANCE_WORKERS: "4"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Redis 生产环境配置
  redis:
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxclients 10000
      --hz 10
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # 配置中心生产环境配置
  config-center:
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=warn
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        rollback_config:
          parallelism: 1
          delay: 10s
          monitor: 60s

  # 管理API生产环境配置
  admin-api:
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=warn
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        rollback_config:
          parallelism: 1
          delay: 10s
          monitor: 60s

  # 插件市场API生产环境配置
  marketplace-api:
    environment:
      - GIN_MODE=release
      - LOG_LEVEL=warn
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        rollback_config:
          parallelism: 1
          delay: 10s
          monitor: 60s

  # Nginx 生产环境配置
  nginx:
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

# 生产环境网络配置
networks:
  laojun-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: laojun-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"

# 生产环境数据卷配置
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/laojun_postgres_data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/laojun_redis_data