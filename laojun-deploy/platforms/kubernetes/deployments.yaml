apiVersion: apps/v1
kind: Deployment
metadata:
  name: laojun-discovery
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: laojun-discovery
    app.kubernetes.io/component: discovery
    app.kubernetes.io/part-of: taishanglaojun-platform
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: laojun-discovery
  template:
    metadata:
      labels:
        app.kubernetes.io/name: laojun-discovery
        app.kubernetes.io/component: discovery
        app.kubernetes.io/part-of: taishanglaojun-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: laojun-discovery
          image: taishanglaojun/laojun-discovery:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: CONFIG_PATH
              value: "/etc/laojun/config.yaml"
            - name: LOG_LEVEL
              value: "info"
            - name: CONSUL_ADDRESS
              value: "consul:8500"
            - name: REDIS_ADDRESS
              value: "redis:6379"
          volumeMounts:
            - name: config
              mountPath: /etc/laojun
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
      volumes:
        - name: config
          configMap:
            name: laojun-discovery-config
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: laojun-monitoring
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: laojun-monitoring
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: taishanglaojun-platform
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: laojun-monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: laojun-monitoring
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: taishanglaojun-platform
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: laojun-monitoring
          image: taishanglaojun/laojun-monitoring:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
            - name: metrics
              containerPort: 9091
              protocol: TCP
          env:
            - name: CONFIG_PATH
              value: "/etc/laojun/config.yaml"
            - name: LOG_LEVEL
              value: "info"
            - name: PROMETHEUS_URL
              value: "http://prometheus:9090"
          volumeMounts:
            - name: config
              mountPath: /etc/laojun
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: 8082
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8082
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: config
          configMap:
            name: laojun-monitoring-config
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: taishanglaojun-platform
    app.kubernetes.io/version: "7.2"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: taishanglaojun-platform
    spec:
      containers:
        - name: redis
          image: redis:7.2-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          args:
            - redis-server
            - --appendonly
            - "yes"
            - --maxmemory
            - "256mb"
            - --maxmemory-policy
            - "allkeys-lru"
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          emptyDir: {}
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: consul
    app.kubernetes.io/component: service-discovery
    app.kubernetes.io/part-of: taishanglaojun-platform
    app.kubernetes.io/version: "1.17"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app.kubernetes.io/component: service-discovery
        app.kubernetes.io/part-of: taishanglaojun-platform
    spec:
      containers:
        - name: consul
          image: consul:1.17
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8500
              protocol: TCP
            - name: dns
              containerPort: 8600
              protocol: TCP
            - name: dns-udp
              containerPort: 8600
              protocol: UDP
            - name: server
              containerPort: 8300
              protocol: TCP
            - name: lan-serf
              containerPort: 8301
              protocol: TCP
            - name: wan-serf
              containerPort: 8302
              protocol: TCP
          env:
            - name: CONSUL_BIND_INTERFACE
              value: "eth0"
            - name: CONSUL_CLIENT_INTERFACE
              value: "eth0"
          args:
            - consul
            - agent
            - -server
            - -bootstrap-expect=1
            - -ui
            - -bind=0.0.0.0
            - -client=0.0.0.0
            - -datacenter=dc1
            - -data-dir=/consul/data
            - -log-level=INFO
          livenessProbe:
            httpGet:
              path: /v1/status/leader
              port: 8500
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /v1/status/leader
              port: 8500
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - name: consul-data
              mountPath: /consul/data
      volumes:
        - name: consul-data
          emptyDir: {}
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: taishanglaojun-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: taishanglaojun-platform
    app.kubernetes.io/version: "2.48"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: taishanglaojun-platform
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.48.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: web
              containerPort: 9090
              protocol: TCP
          args:
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --storage.tsdb.retention.time=15d
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
            - --web.enable-admin-api
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
              readOnly: true
            - name: rules
              mountPath: /etc/prometheus/rules
              readOnly: true
            - name: prometheus-data
              mountPath: /prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: rules
          configMap:
            name: prometheus-rules
        - name: prometheus-data
          emptyDir: {}
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: taishanglaojun-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: taishanglaojun-platform
    app.kubernetes.io/version: "10.2"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: taishanglaojun-platform
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: web
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin123"
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          volumeMounts:
            - name: config
              mountPath: /etc/grafana
              readOnly: true
            - name: grafana-data
              mountPath: /var/lib/grafana
      volumes:
        - name: config
          configMap:
            name: grafana-config
        - name: grafana-data
          emptyDir: {}
      restartPolicy: Always