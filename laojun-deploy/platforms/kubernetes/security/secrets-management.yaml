# 密钥管理配置
# 为太上老君微服务平台定义密钥和敏感信息管理策略

# 数据库连接密钥
apiVersion: v1
kind: Secret
metadata:
  name: taishanglaojun-database-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
    secret.type: database
  annotations:
    kubernetes.io/description: "Database connection secrets for Taishang Laojun platform"
type: Opaque
data:
  # Redis 配置（Base64 编码）
  redis-password: ""  # 需要在部署时设置
  redis-host: cmVkaXMudGFpc2hhbmdsYW9qdW4uc3ZjLmNsdXN0ZXIubG9jYWw=  # redis.taishanglaojun.svc.cluster.local
  redis-port: NjM3OQ==  # 6379
  
  # Consul 配置
  consul-token: ""  # 需要在部署时设置
  consul-host: Y29uc3VsLnRhaXNoYW5nbGFvanVuLnN2Yy5jbHVzdGVyLmxvY2Fs  # consul.taishanglaojun.svc.cluster.local
  consul-port: ODUwMA==  # 8500
  
  # Elasticsearch 配置（如果使用）
  elasticsearch-username: ZWxhc3RpYw==  # elastic
  elasticsearch-password: ""  # 需要在部署时设置
  elasticsearch-host: ZWxhc3RpY3NlYXJjaC50YWlzaGFuZ2xhb2p1bi5zdmMuY2x1c3Rlci5sb2NhbA==
---
# 监控系统密钥
apiVersion: v1
kind: Secret
metadata:
  name: taishanglaojun-monitoring-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun-monitoring
    secret.type: monitoring
type: Opaque
data:
  # Grafana 管理员凭据
  grafana-admin-user: YWRtaW4=  # admin
  grafana-admin-password: ""  # 需要在部署时设置
  
  # Prometheus 配置
  prometheus-config: ""  # 需要在部署时设置完整配置
  
  # Jaeger 配置
  jaeger-storage-type: bWVtb3J5  # memory
  
  # InfluxDB 配置（如果使用）
  influxdb-admin-user: YWRtaW4=  # admin
  influxdb-admin-password: ""  # 需要在部署时设置
  influxdb-database: dGFpc2hhbmdsYW9qdW4=  # taishanglaojun
---
# API 密钥和令牌
apiVersion: v1
kind: Secret
metadata:
  name: taishanglaojun-api-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
    secret.type: api
type: Opaque
data:
  # JWT 签名密钥
  jwt-secret: ""  # 需要在部署时生成强密钥
  jwt-issuer: dGFpc2hhbmdsYW9qdW4=  # taishanglaojun
  jwt-expiry: ODY0MDA=  # 86400 (24小时)
  
  # API 密钥
  api-key: ""  # 需要在部署时生成
  api-secret: ""  # 需要在部署时生成
  
  # 外部服务 API 密钥
  external-api-keys: ""  # JSON 格式的外部 API 密钥
---
# TLS 证书
apiVersion: v1
kind: Secret
metadata:
  name: taishanglaojun-tls-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
    secret.type: tls
type: kubernetes.io/tls
data:
  tls.crt: ""  # 需要在部署时设置 TLS 证书
  tls.key: ""  # 需要在部署时设置 TLS 私钥
---
# 镜像拉取密钥
apiVersion: v1
kind: Secret
metadata:
  name: taishanglaojun-registry-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
    secret.type: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: ""  # 需要在部署时设置镜像仓库凭据
---
# Sealed Secret 配置（用于 GitOps）
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: taishanglaojun-sealed-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
    secret.type: sealed
spec:
  encryptedData:
    # 这些值需要使用 kubeseal 工具加密
    database-password: ""
    api-secret: ""
    jwt-secret: ""
  template:
    metadata:
      name: taishanglaojun-sealed-secrets
      namespace: taishanglaojun
    type: Opaque
---
# External Secrets Operator 配置
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: taishanglaojun-secret-store
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
spec:
  provider:
    vault:
      server: "https://vault.example.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "taishanglaojun"
          serviceAccountRef:
            name: "taishanglaojun-vault"
---
# External Secret 定义
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: taishanglaojun-external-secrets
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: taishanglaojun-secret-store
    kind: SecretStore
  target:
    name: taishanglaojun-vault-secrets
    creationPolicy: Owner
  data:
  - secretKey: database-password
    remoteRef:
      key: taishanglaojun/database
      property: password
  - secretKey: api-secret
    remoteRef:
      key: taishanglaojun/api
      property: secret
  - secretKey: jwt-secret
    remoteRef:
      key: taishanglaojun/jwt
      property: secret
---
# 密钥轮换 CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: taishanglaojun-secret-rotation
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
    job.type: security
spec:
  schedule: "0 2 * * 0"  # 每周日凌晨2点执行
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: taishanglaojun-secret-rotation
        spec:
          serviceAccountName: taishanglaojun-admin
          restartPolicy: OnFailure
          containers:
          - name: secret-rotation
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              # 密钥轮换脚本
              echo "Starting secret rotation..."
              
              # 生成新的 JWT 密钥
              NEW_JWT_SECRET=$(openssl rand -base64 32)
              kubectl patch secret taishanglaojun-api-secrets -p "{\"data\":{\"jwt-secret\":\"$(echo -n $NEW_JWT_SECRET | base64 -w 0)\"}}"
              
              # 生成新的 API 密钥
              NEW_API_SECRET=$(openssl rand -hex 32)
              kubectl patch secret taishanglaojun-api-secrets -p "{\"data\":{\"api-secret\":\"$(echo -n $NEW_API_SECRET | base64 -w 0)\"}}"
              
              # 重启相关服务以应用新密钥
              kubectl rollout restart deployment/taishanglaojun-discovery
              kubectl rollout restart deployment/taishanglaojun-monitoring
              
              echo "Secret rotation completed successfully"
            env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000
---
# 密钥访问审计策略
apiVersion: audit.k8s.io/v1
kind: Policy
metadata:
  name: taishanglaojun-secret-audit
  labels:
    app.kubernetes.io/name: taishanglaojun
rules:
# 审计所有密钥访问
- level: Metadata
  namespaces: ["taishanglaojun"]
  resources:
  - group: ""
    resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
  
# 审计 ServiceAccount 令牌访问
- level: Request
  namespaces: ["taishanglaojun"]
  resources:
  - group: ""
    resources: ["serviceaccounts/token"]
  verbs: ["create"]

# 审计配置映射访问（可能包含敏感信息）
- level: Metadata
  namespaces: ["taishanglaojun"]
  resources:
  - group: ""
    resources: ["configmaps"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
  omitStages:
  - RequestReceived
---
# 密钥管理 RBAC
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: taishanglaojun
  name: secret-manager
  labels:
    app.kubernetes.io/name: taishanglaojun
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "secretstores"]
  verbs: ["get", "list", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: taishanglaojun
  labels:
    app.kubernetes.io/name: taishanglaojun
subjects:
- kind: ServiceAccount
  name: taishanglaojun-admin
  namespace: taishanglaojun
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
# 密钥验证 ValidatingAdmissionWebhook
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: taishanglaojun-secret-validator
  labels:
    app.kubernetes.io/name: taishanglaojun
webhooks:
- name: secret.validation.taishanglaojun.io
  clientConfig:
    service:
      name: taishanglaojun-secret-validator
      namespace: taishanglaojun
      path: "/validate-secret"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["secrets"]
  namespaceSelector:
    matchLabels:
      name: taishanglaojun
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail